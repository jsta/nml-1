s = ( <pre_stmt_junk>? namelist_input_stmt )+ <post_input_junk>?

pre_stmt_junk = ( #'![^\n]*' / ( !input_stmt_prefix #'[^!]|\n' )+ )+

post_input_junk = ( !input_stmt_prefix ( #'\s*![^\n]*' / #'.|\n' ) )+

namelist_group_name = #'[a-zA-Z][a-zA-Z0-9_]{0,30}'

namelist_input_stmt = input_stmt_prefix name_value_subsequences <slash_terminator>

input_stmt_prefix = <'&'> namelist_group_name <#'\s+'>

name_value_subsequences = <comment+> / name_value_subsequence*

slash_terminator = #'\s*/\s*'

name_value_subsequence = dataref <#'\s*=\s*'> value_and_separator ( <comment> / value_and_separator )*

value = r star c / r star / c / <null>

value_and_separator = value <separator>

separator = separator_comma / separator_blank / &slash_terminator

separator_comma = #'\s*,\s*'

separator_blank = #'\s+' &( value / dataref / comment )

comment = '!' #'[^\n]*' #'\s+'

null = #'\s*' &separator_comma

array                = name sect
c                    = real / string / logical / complex
comma                = ','
complex              = '(' <#'\s*'> real <#'\s*'> comma <#'\s*'> real <#'\s*'> ')'
dataref              = partref ( '%' partref )*
dec                  = '.' uint?
exp                  = sign uint / #'[eE]' <#'\s*'> int / #'[dD]' <#'\s*'> int
false                = 'f' / 'F'
int                  = sign? uint
logical              = <'.'>? ( true / false ) <#'[^/,=\s]*'>
minus                = '-'
name                 = #'[a-zA-Z][a-zA-Z0-9_]{0,30}'
partref              = array / name
plus                 = '+'
r                    = uint
real                 = int dec? exp? / sign? dec int exp?
sect                 = <'('> ( int? ':' int? / int ) ( ':' int )? <')'>
sign                 = minus / plus
star                 = '*'
string               = "'" ( #'[^\'\n]' / "''" / <"\n"> )* "'" / '"' ( #'[^\"\n]' / '""' / <"\n"> )* '"'
true                 = 't' / 'T'
uint                 = #'[0-9]+'
