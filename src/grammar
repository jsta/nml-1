s                    = <junk> ( stmt <junk> )*

array                = name sect
c                    = real | string | logical | complex
comment              = '!' #'[^\n]*'
complex              = <'('> <wsopt> real <wsopt> <','> <wsopt> real <wsopt> <')'>
dataref              = partref ( '%' partref )*
dec                  = '.' uint?
exp                  = sign uint | 'e' <wsopt> int | 'd' <wsopt> int
false                = 'f' | 'F'
filler               = ( ws / comment )*
int                  = sign? uint
junk                 = ( #'[^!&]+' / comment )*
logical              = <'.'>? ( true | false ) <#'[^/,=\s]*'>
name                 = #'[a-zA-Z][a-zA-Z0-9_]{0,30}'
nv_sequence          = ( <filler> nv_subsequence ( <nv_subsequence_sep> / <nv_subsequence_end> ) )*
nv_subsequence       = nv_subsequence_begin values
nv_subsequence_begin = <filler> dataref <filler> <'='>
nv_subsequence_end   = &( filler ( nv_subsequence_begin / stmt_end ) )
nv_subsequence_sep   = filler ( ',' / ws )
partref              = array | name
r                    = uint
real                 = int dec? exp? | sign? dec int exp?
sect                 = <'('> ( int? ':' int? | int ) ( ':' int )? <')'>
sign                 = '-' | '+'
star                 = '*'
stmt                 = <filler> <'&'> name <ws> nv_sequence stmt_end
stmt_end             = <filler> <'/'>
string               = "'" ( #'[^\'\n]' | "''" | <"\n"> )* "'" | '"' ( #'[^\"\n]' | '""' | <"\n"> )* '"'
true                 = 't' | 'T'
uint                 = #'[0-9]+'
value                = r star c / r star / c
values               = <filler> ( <filler> value <values_sep> )*
values_sep           = wsopt ',' / ws
ws                   = #'\s+'
wsopt                = #'\s*'
